package com.dbtool.queuecreator;

import java.util.ArrayList;
import java.util.List;

import com.dbtool.queuecreator.intermediate.TableConnection;
import com.dbtool.queueingpetrinet.TokenColour;

/**
 * Removes the virtual if nodes inserted in the queueing network generated by QueueNetworkConstructionVisitor.
 *
 */
public class VirtualIfNodeRemover {
	
	public List<TableConnection> removeIfNodes(List<TableConnection> originalConnections, int numberOfIfNodes) {
		List<TableConnection> connections = new ArrayList<TableConnection>(originalConnections);
		//Loops through the virtual nodes
		for (int virtNode = 1; virtNode <= numberOfIfNodes; virtNode++) {
			//Gets connections for the virtual if node
			List<TableConnection> sourceConns = getSourceConnectionsForVirt(connections, virtNode);
			List<TableConnection> destConns = getDestinationConnectionsForVirt(connections, virtNode);
			//Loop through both connection types
			for (TableConnection sourceConn : sourceConns) {
				for (TableConnection destConn : destConns) {
					//When both source and dest use the same token colour
					if (sourceConn.getTokenColour().equals(destConn.getTokenColour())) {
						//Consolidate connection into a single connection from src to dest
						String sourceTable = sourceConn.getSourceTable();
						String destTable = destConn.getTargetTable();
						TokenColour colour = sourceConn.getTokenColour();
						double sourceConnProp = sourceConn.getProportion();
						double destConnProp = destConn.getProportion();
						double newProp = sourceConnProp * destConnProp;
						TableConnection existingConn = findConnection(connections, sourceTable, destTable, colour);
						if (existingConn == null) {
							TableConnection newConn = new TableConnection(sourceTable, destTable, colour, newProp);
							connections.add(newConn);
						}
						else {
							TableConnection replacementConn = new TableConnection(sourceTable, destTable, colour, existingConn.getProportion() + newProp);
							connections.remove(existingConn);
							connections.add(replacementConn);
						}
						connections.remove(sourceConn);
						connections.remove(destConn);
						
					}
				}
			}
		}
		return connections;
	}
	
	private TableConnection findConnection(List<TableConnection> connections, String source, String dest, TokenColour tok) {
		for (TableConnection conn : connections) {
			if (conn.getSourceTable().equals(source) && conn.getTargetTable().equals(dest) && conn.getTokenColour().equals(tok)) {
				return conn;
			}
		}
		return null;
	}
	
	private List<TableConnection> getSourceConnectionsForVirt(List<TableConnection> connections, int virtNode) {
		List<TableConnection> sourceConnections = new ArrayList<TableConnection>();
		String virtualNodeName = TableConnection.getVirtualIfNodeName(virtNode);
		for (TableConnection conn : connections) {
			if (conn.getTargetTable().equals(virtualNodeName)) {
				sourceConnections.add(conn);
			}
		}
		return sourceConnections;
	}
	
	private List<TableConnection> getDestinationConnectionsForVirt(List<TableConnection> connections, int virtNode) {
		List<TableConnection> destConnections = new ArrayList<TableConnection>();
		String virtualNodeName = TableConnection.getVirtualIfNodeName(virtNode);
		for (TableConnection conn : connections) {
			if (conn.getSourceTable().equals(virtualNodeName)) {
				destConnections.add(conn);
			}
		}
		return destConnections;
	}
}
